// Grid
//------------------------------------------------------------------------------
$maxWidth: 1400px;
$gridGutter: 16px;

@mixin gridWidth {
  max-width: $maxWidth;
  margin-right: auto;
  margin-left: auto;
}

@mixin gridPadding {
  padding-right: $gridGutter;
  padding-left: $gridGutter;

  @include breakpoint(large up) {
    padding-right: $gridGutter * 2;
    padding-left: $gridGutter * 2;
  }
}

// Breakpoints
//------------------------------------------------------------------------------

$breakpoints: (
  small: 0,
  medium: 740px,
  large: 1024px,
  xlarge: 1200px,
  xxlarge: 1400px,
);

@mixin breakpoint($breakpoint) {
  $bp: nth($breakpoint, 1);
  $max: 0;
  $dir: nth($breakpoint, 2);
  $query: 'only screen';

  @if map-has-key($breakpoints, $bp) {
    $min: map-get($breakpoints, $bp);
    $nextIndex: index($breakpoints, $bp $min) + 1;
    $next: if($nextIndex > length($breakpoints), null, nth($breakpoints, $nextIndex));

    @if $dir == 'only' {
      $query: $query + ' and (min-width: #{$min})';

      @if $next == null {
        $max: null;
      } @else {
        $max: nth($next, 2) - (1 / 16);
        $query: $query + ' and (max-width: #{$max})';
      }
    } @else if $dir == 'up' {
      $query: $query + ' and (min-width: #{$min})';
    } @else if $dir == 'down' {
      $max: nth($next, 2) - (1 / 16);
      $query: $query + ' and (max-width: #{$max})';
    }

    @media #{$query} {
      @content;
    }
  }
}

/// Apply a custom font with fallbacks while loading - avoids FOIT.
/// @prop {String|List} $font - Custom font name(s) as specified in fonts.coffee.
/// @prop {String|List} $fallbacks - Fallback font name(s) to use until custom fonts load. Should
///   end with a generic family without quotes, e.g. sans-serif.
/// @see https://www.filamentgroup.com/lab/font-events.html.
@mixin font-family($font, $fallbacks) {
  font-family: $font, $fallbacks;

  .fonts-loading & {
    font-family: $fallbacks;
  }
}


// Fonts
//------------------------------------------------------------------------------

$fallbacks: Helvetica Neue, Helvetica, Arial, sans-serif;


@mixin poppins ($weight: 300, $style: normal) {
  @include font-family('Poppins', $fallbacks);
  font-style: $style;
  font-weight: $weight;
}

@mixin playfair ($weight: 600, $style: normal) {
  @include font-family('Playfair Display', $fallbacks);
  font-style: $style;
  font-weight: $weight;
}

@mixin font-smoothing($value: on) {
  @if $value == on {
    -moz-osx-font-smoothing: grayscale;
    -webkit-font-smoothing: antialiased;
  } @else {
    -moz-osx-font-smoothing: auto;
    -webkit-font-smoothing: subpixel-antialiased;
  }
}


// Typography
//------------------------------------------------------------------------------

@mixin hero {
  max-width: 400px;

  span {
    padding-bottom: 2px;
    color: var(--bg-color);
    background-color: var(--font-color);
    font-size: 32px;
    letter-spacing: 0.03em;
    line-height: 48px;
  }

  @media only screen and (max-width: 399px) {

    span {
      font-size: 24px;
      line-height: 1;
    }
  }

  @include breakpoint(medium up) {
    max-width: 560px;

    span {
      font-size: 48px;
      line-height: 72px;
    }
  }
}

@mixin body {
  @include poppins;
  font-size: 16px;
  letter-spacing: 0.03em;
  line-height: 1.3;

  @include breakpoint(medium up) {
    font-size: 18px;
  }
}


// Colors
//------------------------------------------------------------------------------

$colors: (
  // Brand colours

  // Tones
);

@function color($color) {
  @return map-get($colors, $color);
}


// Layout
//------------------------------------------------------------------------------

@mixin hideScrollbars {
  scrollbar-width: none;
  // sass-lint:disable no-vendor-prefixes
  -ms-overflow-style: none;

  &::-webkit-scrollbar {
    display: none;
  }
}

@mixin bgImg {
  background-repeat: no-repeat;
  background-size: cover;
}

@mixin visuallyHidden {
  position: absolute !important;
  height: 1px;
  width: 1px;
  overflow: hidden;
  clip: rect(1px 1px 1px 1px); /* IE6, IE7 */
  clip: rect(1px, 1px, 1px, 1px);
  white-space: nowrap; /* added line */
}


// Block Sizings
//------------------------------------------------------------------------------

$blocks: (
  4xlarge: 9rem,
  3xlarge: 7rem,
  2xlarge: 5rem,
  xlarge: 4rem,
  large: 3rem,
  medium: 2rem,
  small: 0.5rem,
  gutter: 1rem,
);

@function block($block) {
  @return map-get($blocks, $block);
}


// Animation
//------------------------------------------------------------------------------

@mixin transition($props, $ease: ease, $duration: 250ms) {
  transition-duration: $duration;
  transition-property: $props;
  transition-timing-function: $ease;
}



// Theme globals
//------------------------------------------------------------------------------


@mixin button {
  @include transition(box-shadow);
  display: inline-block;
  min-width: 140px;
  padding: block(gutter) block(medium);
  margin-top: block(medium);
  font-weight: bold;
  color: black;
  background-color: var(--secondary-color);
  border-radius: 26px;
  text-align: center;
  cursor: pointer;

  &:hover {
    box-shadow: 0 0 10px 0 var(--shadow-color);
  }

  @include breakpoint(small only) {
    margin-top: 24px;
  }
}

@mixin defaultLink {
  color: inherit;
  font-weight: bold;
}

@mixin themeLink {
  display: inline-block;
  position: relative;
  color: var(--font-color);
  font-weight: bold;

  &::after {
    @include transition(transform);
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: var(--secondary-color);
    transform: scaleY(0.2);
    transform-origin: 0 100%;
    z-index: -1;
  }

  &:hover::after {
    transform: scaleY(1);
  }
}

@mixin themeList {

  li {
    position: relative;
    padding-left: block(gutter);
    margin-bottom: 0.5rem;
  }

  li::before {
    content: '';
    position: absolute;
    top: 7px;
    left: 0;
    border-top: 5px solid transparent;
    border-bottom: 5px solid transparent;
    border-left: 5px solid var(--secondary-color);
  }
}

@mixin fadeInStart($time: 600ms) {
  @include transition((opacity, transform), ease, $time);
  opacity: 0;
  transform: translateY(60px);

  @media (prefers-reduced-motion) {
    transform: translateY(0);
  }
}

@mixin fadeInEnd {
  opacity: 1;
  transform: translateY(0);
}